// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// UsersServerInterface 代表所有服务器处理程序。
type UsersServerInterface interface {
	// 获取当前用户信息
	// (GET /users/me)
	GetUsersMe(c *gin.Context)
}

// UsersServerInterfaceWrapper 将上下文转换为参数。
type UsersServerInterfaceWrapper struct {
	Handler            UsersServerInterface
	HandlerMiddlewares []UsersMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type UsersMiddlewareFunc func(c *gin.Context)

// GetUsersMe 操作中间件
func (siw *UsersServerInterfaceWrapper) GetUsersMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersMe(c)
}

// UsersGinServerOptions 提供 Gin 服务器的选项。
type UsersGinServerOptions struct {
	BaseURL      string
	Middlewares  []UsersMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterUsersHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterUsersHandlers(router gin.IRouter, si UsersServerInterface) {
	RegisterUsersHandlersWithOptions(router, si, UsersGinServerOptions{})
}

// RegisterUsersHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterUsersHandlersWithOptions(router gin.IRouter, si UsersServerInterface, options UsersGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := UsersServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/users/me", wrapper.GetUsersMe)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse struct {
	Code string `json:"code"`
	Data User   `json:"data"`
}

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401JSONResponse Unauthorized

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe500JSONResponse InternalServerError

func (response GetUsersMe500JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// UsersStrictServerInterface represents all server handlers.
type UsersStrictServerInterface interface {
	// 获取当前用户信息
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
}

type UsersStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type UsersStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewUsersStrictHandler(ssi UsersStrictServerInterface, middlewares []UsersStrictMiddlewareFunc) UsersServerInterface {
	return &UsersstrictHandler{ssi: ssi, middlewares: middlewares}
}

type UsersstrictHandler struct {
	ssi         UsersStrictServerInterface
	middlewares []UsersStrictMiddlewareFunc
}

// GetUsersMe 操作中间件
func (sh *UsersstrictHandler) GetUsersMe(ctx *gin.Context) {
	var request GetUsersMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
