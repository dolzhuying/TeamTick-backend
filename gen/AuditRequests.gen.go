// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// AuditRequestsServerInterface 代表所有服务器处理程序。
type AuditRequestsServerInterface interface {
	// 处理签到审核申请
	// (PUT /audit-requests/{auditRequestId})
	PutAuditRequestsAuditRequestId(c *gin.Context, auditRequestId int)
	// 提交签到异常审核申请
	// (POST /checkin-tasks/{taskId}/audit-requests)
	PostCheckinTasksTaskIdAuditRequests(c *gin.Context, taskId int)
	// 获取用户组的签到审核申请列表
	// (GET /groups/{groupId}/audit-requests)
	GetGroupsGroupIdAuditRequests(c *gin.Context, groupId int, params GetGroupsGroupIdAuditRequestsParams)
	// 获取当前用户的审核请求
	// (GET /users/me/audit-requests)
	GetUsersMeAuditRequests(c *gin.Context)
}

// AuditRequestsServerInterfaceWrapper 将上下文转换为参数。
type AuditRequestsServerInterfaceWrapper struct {
	Handler            AuditRequestsServerInterface
	HandlerMiddlewares []AuditRequestsMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type AuditRequestsMiddlewareFunc func(c *gin.Context)

// PutAuditRequestsAuditRequestId 操作中间件
func (siw *AuditRequestsServerInterfaceWrapper) PutAuditRequestsAuditRequestId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "auditRequestId" -------------
	var auditRequestId int

	err = runtime.BindStyledParameterWithOptions("simple", "auditRequestId", c.Param("auditRequestId"), &auditRequestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 auditRequestId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAuditRequestsAuditRequestId(c, auditRequestId)
}

// PostCheckinTasksTaskIdAuditRequests 操作中间件
func (siw *AuditRequestsServerInterfaceWrapper) PostCheckinTasksTaskIdAuditRequests(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCheckinTasksTaskIdAuditRequests(c, taskId)
}

// GetGroupsGroupIdAuditRequests 操作中间件
func (siw *AuditRequestsServerInterfaceWrapper) GetGroupsGroupIdAuditRequests(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// 参数对象，我们将从上下文中解析所有参数到此对象
	var params GetGroupsGroupIdAuditRequestsParams

	// ------------- 可选查询参数 "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 status 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupIdAuditRequests(c, groupId, params)
}

// GetUsersMeAuditRequests 操作中间件
func (siw *AuditRequestsServerInterfaceWrapper) GetUsersMeAuditRequests(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersMeAuditRequests(c)
}

// AuditRequestsGinServerOptions 提供 Gin 服务器的选项。
type AuditRequestsGinServerOptions struct {
	BaseURL      string
	Middlewares  []AuditRequestsMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterAuditRequestsHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterAuditRequestsHandlers(router gin.IRouter, si AuditRequestsServerInterface) {
	RegisterAuditRequestsHandlersWithOptions(router, si, AuditRequestsGinServerOptions{})
}

// RegisterAuditRequestsHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterAuditRequestsHandlersWithOptions(router gin.IRouter, si AuditRequestsServerInterface, options AuditRequestsGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"code": "1", "message": err.Error()})
		}
	}

	wrapper := AuditRequestsServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/audit-requests/:auditRequestId", wrapper.PutAuditRequestsAuditRequestId)
	router.POST(options.BaseURL+"/checkin-tasks/:taskId/audit-requests", wrapper.PostCheckinTasksTaskIdAuditRequests)
	router.GET(options.BaseURL+"/groups/:groupId/audit-requests", wrapper.GetGroupsGroupIdAuditRequests)
	router.GET(options.BaseURL+"/users/me/audit-requests", wrapper.GetUsersMeAuditRequests)
}

type PutAuditRequestsAuditRequestIdRequestObject struct {
	AuditRequestId int `json:"auditRequestId"`
	Body           *PutAuditRequestsAuditRequestIdJSONRequestBody
}

type PutAuditRequestsAuditRequestIdResponseObject interface {
	VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error
}

type PutAuditRequestsAuditRequestId200JSONResponse Success

func (response PutAuditRequestsAuditRequestId200JSONResponse) VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAuditRequestsAuditRequestId400JSONResponse BadRequest

func (response PutAuditRequestsAuditRequestId400JSONResponse) VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutAuditRequestsAuditRequestId401JSONResponse Unauthorized

func (response PutAuditRequestsAuditRequestId401JSONResponse) VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutAuditRequestsAuditRequestId403JSONResponse Forbidden

func (response PutAuditRequestsAuditRequestId403JSONResponse) VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutAuditRequestsAuditRequestId404JSONResponse NotFound

func (response PutAuditRequestsAuditRequestId404JSONResponse) VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutAuditRequestsAuditRequestId409JSONResponse Conflict

func (response PutAuditRequestsAuditRequestId409JSONResponse) VisitPutAuditRequestsAuditRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequestsRequestObject struct {
	TaskId int `json:"taskId"`
	Body   *PostCheckinTasksTaskIdAuditRequestsJSONRequestBody
}

type PostCheckinTasksTaskIdAuditRequestsResponseObject interface {
	VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error
}

type PostCheckinTasksTaskIdAuditRequests201JSONResponse struct {
	Code string       `json:"code"`
	Data AuditRequest `json:"data"`
}

func (response PostCheckinTasksTaskIdAuditRequests201JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequests400JSONResponse BadRequest

func (response PostCheckinTasksTaskIdAuditRequests400JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequests401JSONResponse Unauthorized

func (response PostCheckinTasksTaskIdAuditRequests401JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequests403JSONResponse Forbidden

func (response PostCheckinTasksTaskIdAuditRequests403JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequests404JSONResponse NotFound

func (response PostCheckinTasksTaskIdAuditRequests404JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequests409JSONResponse Conflict

func (response PostCheckinTasksTaskIdAuditRequests409JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdAuditRequests500JSONResponse InternalServerError

func (response PostCheckinTasksTaskIdAuditRequests500JSONResponse) VisitPostCheckinTasksTaskIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdAuditRequestsRequestObject struct {
	GroupId int `json:"groupId"`
	Params  GetGroupsGroupIdAuditRequestsParams
}

type GetGroupsGroupIdAuditRequestsResponseObject interface {
	VisitGetGroupsGroupIdAuditRequestsResponse(w http.ResponseWriter) error
}

type GetGroupsGroupIdAuditRequests200JSONResponse struct {
	Code string         `json:"code"`
	Data []AuditRequest `json:"data"`
}

func (response GetGroupsGroupIdAuditRequests200JSONResponse) VisitGetGroupsGroupIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdAuditRequests401JSONResponse Unauthorized

func (response GetGroupsGroupIdAuditRequests401JSONResponse) VisitGetGroupsGroupIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdAuditRequests403JSONResponse Forbidden

func (response GetGroupsGroupIdAuditRequests403JSONResponse) VisitGetGroupsGroupIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdAuditRequests404JSONResponse NotFound

func (response GetGroupsGroupIdAuditRequests404JSONResponse) VisitGetGroupsGroupIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdAuditRequests500JSONResponse InternalServerError

func (response GetGroupsGroupIdAuditRequests500JSONResponse) VisitGetGroupsGroupIdAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeAuditRequestsRequestObject struct {
}

type GetUsersMeAuditRequestsResponseObject interface {
	VisitGetUsersMeAuditRequestsResponse(w http.ResponseWriter) error
}

type GetUsersMeAuditRequests200JSONResponse struct {
	Code string         `json:"code"`
	Data []AuditRequest `json:"data"`
}

func (response GetUsersMeAuditRequests200JSONResponse) VisitGetUsersMeAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeAuditRequests401JSONResponse Unauthorized

func (response GetUsersMeAuditRequests401JSONResponse) VisitGetUsersMeAuditRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// AuditRequestsStrictServerInterface represents all server handlers.
type AuditRequestsStrictServerInterface interface {
	// 处理签到审核申请
	// (PUT /audit-requests/{auditRequestId})
	PutAuditRequestsAuditRequestId(ctx context.Context, request PutAuditRequestsAuditRequestIdRequestObject) (PutAuditRequestsAuditRequestIdResponseObject, error)
	// 提交签到异常审核申请
	// (POST /checkin-tasks/{taskId}/audit-requests)
	PostCheckinTasksTaskIdAuditRequests(ctx context.Context, request PostCheckinTasksTaskIdAuditRequestsRequestObject) (PostCheckinTasksTaskIdAuditRequestsResponseObject, error)
	// 获取用户组的签到审核申请列表
	// (GET /groups/{groupId}/audit-requests)
	GetGroupsGroupIdAuditRequests(ctx context.Context, request GetGroupsGroupIdAuditRequestsRequestObject) (GetGroupsGroupIdAuditRequestsResponseObject, error)
	// 获取当前用户的审核请求
	// (GET /users/me/audit-requests)
	GetUsersMeAuditRequests(ctx context.Context, request GetUsersMeAuditRequestsRequestObject) (GetUsersMeAuditRequestsResponseObject, error)
}

type AuditRequestsStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type AuditRequestsStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewAuditRequestsStrictHandler(ssi AuditRequestsStrictServerInterface, middlewares []AuditRequestsStrictMiddlewareFunc) AuditRequestsServerInterface {
	return &AuditRequestsstrictHandler{ssi: ssi, middlewares: middlewares}
}

type AuditRequestsstrictHandler struct {
	ssi         AuditRequestsStrictServerInterface
	middlewares []AuditRequestsStrictMiddlewareFunc
}

// PutAuditRequestsAuditRequestId 操作中间件
func (sh *AuditRequestsstrictHandler) PutAuditRequestsAuditRequestId(ctx *gin.Context, auditRequestId int) {
	var request PutAuditRequestsAuditRequestIdRequestObject

	request.AuditRequestId = auditRequestId

	var body PutAuditRequestsAuditRequestIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAuditRequestsAuditRequestId(ctx, request.(PutAuditRequestsAuditRequestIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAuditRequestsAuditRequestId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAuditRequestsAuditRequestIdResponseObject); ok {
		if err := validResponse.VisitPutAuditRequestsAuditRequestIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCheckinTasksTaskIdAuditRequests 操作中间件
func (sh *AuditRequestsstrictHandler) PostCheckinTasksTaskIdAuditRequests(ctx *gin.Context, taskId int) {
	var request PostCheckinTasksTaskIdAuditRequestsRequestObject

	request.TaskId = taskId

	var body PostCheckinTasksTaskIdAuditRequestsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCheckinTasksTaskIdAuditRequests(ctx, request.(PostCheckinTasksTaskIdAuditRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCheckinTasksTaskIdAuditRequests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCheckinTasksTaskIdAuditRequestsResponseObject); ok {
		if err := validResponse.VisitPostCheckinTasksTaskIdAuditRequestsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupsGroupIdAuditRequests 操作中间件
func (sh *AuditRequestsstrictHandler) GetGroupsGroupIdAuditRequests(ctx *gin.Context, groupId int, params GetGroupsGroupIdAuditRequestsParams) {
	var request GetGroupsGroupIdAuditRequestsRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupsGroupIdAuditRequests(ctx, request.(GetGroupsGroupIdAuditRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupsGroupIdAuditRequests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsGroupIdAuditRequestsResponseObject); ok {
		if err := validResponse.VisitGetGroupsGroupIdAuditRequestsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMeAuditRequests 操作中间件
func (sh *AuditRequestsstrictHandler) GetUsersMeAuditRequests(ctx *gin.Context) {
	var request GetUsersMeAuditRequestsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMeAuditRequests(ctx, request.(GetUsersMeAuditRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMeAuditRequests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersMeAuditRequestsResponseObject); ok {
		if err := validResponse.VisitGetUsersMeAuditRequestsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
