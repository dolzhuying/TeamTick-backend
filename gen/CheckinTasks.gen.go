// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// CheckinTasksServerInterface 代表所有服务器处理程序。
type CheckinTasksServerInterface interface {
	// 删除签到任务
	// (DELETE /checkin-tasks/{taskId})
	DeleteCheckinTasksTaskId(c *gin.Context, taskId int)
	// 获取签到任务详细信息
	// (GET /checkin-tasks/{taskId})
	GetCheckinTasksTaskId(c *gin.Context, taskId int)
	// 更新签到任务
	// (PUT /checkin-tasks/{taskId})
	PutCheckinTasksTaskId(c *gin.Context, taskId int)
	// 验证签到信息
	// (POST /checkin-tasks/{taskId}/verify)
	PostCheckinTasksTaskIdVerify(c *gin.Context, taskId int)
	// 获取用户组的签到任务列表
	// (GET /groups/{groupId}/checkin-tasks)
	GetGroupsGroupIdCheckinTasks(c *gin.Context, groupId int)
	// 创建签到任务
	// (POST /groups/{groupId}/checkin-tasks)
	PostGroupsGroupIdCheckinTasks(c *gin.Context, groupId int)
	// 获取当前用户的签到任务
	// (GET /users/me/checkin-tasks)
	GetUsersMeCheckinTasks(c *gin.Context)
}

// CheckinTasksServerInterfaceWrapper 将上下文转换为参数。
type CheckinTasksServerInterfaceWrapper struct {
	Handler            CheckinTasksServerInterface
	HandlerMiddlewares []CheckinTasksMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type CheckinTasksMiddlewareFunc func(c *gin.Context)

// DeleteCheckinTasksTaskId 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) DeleteCheckinTasksTaskId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCheckinTasksTaskId(c, taskId)
}

// GetCheckinTasksTaskId 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) GetCheckinTasksTaskId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCheckinTasksTaskId(c, taskId)
}

// PutCheckinTasksTaskId 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) PutCheckinTasksTaskId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCheckinTasksTaskId(c, taskId)
}

// PostCheckinTasksTaskIdVerify 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) PostCheckinTasksTaskIdVerify(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCheckinTasksTaskIdVerify(c, taskId)
}

// GetGroupsGroupIdCheckinTasks 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) GetGroupsGroupIdCheckinTasks(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupIdCheckinTasks(c, groupId)
}

// PostGroupsGroupIdCheckinTasks 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) PostGroupsGroupIdCheckinTasks(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroupsGroupIdCheckinTasks(c, groupId)
}

// GetUsersMeCheckinTasks 操作中间件
func (siw *CheckinTasksServerInterfaceWrapper) GetUsersMeCheckinTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersMeCheckinTasks(c)
}

// CheckinTasksGinServerOptions 提供 Gin 服务器的选项。
type CheckinTasksGinServerOptions struct {
	BaseURL      string
	Middlewares  []CheckinTasksMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterCheckinTasksHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterCheckinTasksHandlers(router gin.IRouter, si CheckinTasksServerInterface) {
	RegisterCheckinTasksHandlersWithOptions(router, si, CheckinTasksGinServerOptions{})
}

// RegisterCheckinTasksHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterCheckinTasksHandlersWithOptions(router gin.IRouter, si CheckinTasksServerInterface, options CheckinTasksGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"code": "1", "message": err.Error()})
		}
	}

	wrapper := CheckinTasksServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/checkin-tasks/:taskId", wrapper.DeleteCheckinTasksTaskId)
	router.GET(options.BaseURL+"/checkin-tasks/:taskId", wrapper.GetCheckinTasksTaskId)
	router.PUT(options.BaseURL+"/checkin-tasks/:taskId", wrapper.PutCheckinTasksTaskId)
	router.POST(options.BaseURL+"/checkin-tasks/:taskId/verify", wrapper.PostCheckinTasksTaskIdVerify)
	router.GET(options.BaseURL+"/groups/:groupId/checkin-tasks", wrapper.GetGroupsGroupIdCheckinTasks)
	router.POST(options.BaseURL+"/groups/:groupId/checkin-tasks", wrapper.PostGroupsGroupIdCheckinTasks)
	router.GET(options.BaseURL+"/users/me/checkin-tasks", wrapper.GetUsersMeCheckinTasks)
}

type DeleteCheckinTasksTaskIdRequestObject struct {
	TaskId int `json:"taskId"`
}

type DeleteCheckinTasksTaskIdResponseObject interface {
	VisitDeleteCheckinTasksTaskIdResponse(w http.ResponseWriter) error
}

type DeleteCheckinTasksTaskId200JSONResponse Success

func (response DeleteCheckinTasksTaskId200JSONResponse) VisitDeleteCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCheckinTasksTaskId401JSONResponse Unauthorized

func (response DeleteCheckinTasksTaskId401JSONResponse) VisitDeleteCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCheckinTasksTaskId403JSONResponse Forbidden

func (response DeleteCheckinTasksTaskId403JSONResponse) VisitDeleteCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCheckinTasksTaskId404JSONResponse NotFound

func (response DeleteCheckinTasksTaskId404JSONResponse) VisitDeleteCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCheckinTasksTaskId500JSONResponse InternalServerError

func (response DeleteCheckinTasksTaskId500JSONResponse) VisitDeleteCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskIdRequestObject struct {
	TaskId int `json:"taskId"`
}

type GetCheckinTasksTaskIdResponseObject interface {
	VisitGetCheckinTasksTaskIdResponse(w http.ResponseWriter) error
}

type GetCheckinTasksTaskId200JSONResponse struct {
	Code string      `json:"code"`
	Data CheckinTask `json:"data"`
}

func (response GetCheckinTasksTaskId200JSONResponse) VisitGetCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskId401JSONResponse Unauthorized

func (response GetCheckinTasksTaskId401JSONResponse) VisitGetCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskId403JSONResponse Forbidden

func (response GetCheckinTasksTaskId403JSONResponse) VisitGetCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskId404JSONResponse NotFound

func (response GetCheckinTasksTaskId404JSONResponse) VisitGetCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskId500JSONResponse InternalServerError

func (response GetCheckinTasksTaskId500JSONResponse) VisitGetCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskIdRequestObject struct {
	TaskId int `json:"taskId"`
	Body   *PutCheckinTasksTaskIdJSONRequestBody
}

type PutCheckinTasksTaskIdResponseObject interface {
	VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error
}

type PutCheckinTasksTaskId200JSONResponse struct {
	Code string      `json:"code"`
	Data CheckinTask `json:"data"`
}

func (response PutCheckinTasksTaskId200JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskId400JSONResponse BadRequest

func (response PutCheckinTasksTaskId400JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskId401JSONResponse Unauthorized

func (response PutCheckinTasksTaskId401JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskId403JSONResponse Forbidden

func (response PutCheckinTasksTaskId403JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskId404JSONResponse NotFound

func (response PutCheckinTasksTaskId404JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskId409JSONResponse Conflict

func (response PutCheckinTasksTaskId409JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PutCheckinTasksTaskId500JSONResponse InternalServerError

func (response PutCheckinTasksTaskId500JSONResponse) VisitPutCheckinTasksTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdVerifyRequestObject struct {
	TaskId int `json:"taskId"`
	Body   *PostCheckinTasksTaskIdVerifyJSONRequestBody
}

type PostCheckinTasksTaskIdVerifyResponseObject interface {
	VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error
}

type PostCheckinTasksTaskIdVerify200JSONResponse struct {
	Code string `json:"code"`
	Data struct {
		// Message 验证结果说明或失败原因
		Message string `json:"message"`

		// Valid 验证是否通过
		Valid bool `json:"valid"`

		// VerifyType 验证的信息类型
		VerifyType PostCheckinTasksTaskIdVerifyJSONBodyVerifyType `json:"verifyType"`
	} `json:"data"`
}
  
func (response PostCheckinTasksTaskIdVerify200JSONResponse) VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdVerify400JSONResponse BadRequest

func (response PostCheckinTasksTaskIdVerify400JSONResponse) VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdVerify401JSONResponse Unauthorized

func (response PostCheckinTasksTaskIdVerify401JSONResponse) VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdVerify403JSONResponse Forbidden

func (response PostCheckinTasksTaskIdVerify403JSONResponse) VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdVerify404JSONResponse NotFound

func (response PostCheckinTasksTaskIdVerify404JSONResponse) VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdVerify500JSONResponse InternalServerError

func (response PostCheckinTasksTaskIdVerify500JSONResponse) VisitPostCheckinTasksTaskIdVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdCheckinTasksRequestObject struct {
	GroupId int `json:"groupId"`
}

type GetGroupsGroupIdCheckinTasksResponseObject interface {
	VisitGetGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error
}

type GetGroupsGroupIdCheckinTasks200JSONResponse struct {
	Code string        `json:"code"`
	Data []CheckinTask `json:"data"`
}

func (response GetGroupsGroupIdCheckinTasks200JSONResponse) VisitGetGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdCheckinTasks401JSONResponse Unauthorized

func (response GetGroupsGroupIdCheckinTasks401JSONResponse) VisitGetGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdCheckinTasks403JSONResponse Forbidden

func (response GetGroupsGroupIdCheckinTasks403JSONResponse) VisitGetGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdCheckinTasks404JSONResponse NotFound

func (response GetGroupsGroupIdCheckinTasks404JSONResponse) VisitGetGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdCheckinTasks500JSONResponse InternalServerError

func (response GetGroupsGroupIdCheckinTasks500JSONResponse) VisitGetGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdCheckinTasksRequestObject struct {
	GroupId int `json:"groupId"`
	Body    *PostGroupsGroupIdCheckinTasksJSONRequestBody
}

type PostGroupsGroupIdCheckinTasksResponseObject interface {
	VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error
}

type PostGroupsGroupIdCheckinTasks201JSONResponse struct {
	Code string      `json:"code"`
	Data CheckinTask `json:"data"`
}

func (response PostGroupsGroupIdCheckinTasks201JSONResponse) VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdCheckinTasks400JSONResponse BadRequest

func (response PostGroupsGroupIdCheckinTasks400JSONResponse) VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdCheckinTasks401JSONResponse Unauthorized

func (response PostGroupsGroupIdCheckinTasks401JSONResponse) VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdCheckinTasks403JSONResponse Forbidden

func (response PostGroupsGroupIdCheckinTasks403JSONResponse) VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdCheckinTasks404JSONResponse NotFound

func (response PostGroupsGroupIdCheckinTasks404JSONResponse) VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdCheckinTasks500JSONResponse InternalServerError

func (response PostGroupsGroupIdCheckinTasks500JSONResponse) VisitPostGroupsGroupIdCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeCheckinTasksRequestObject struct {
}

type GetUsersMeCheckinTasksResponseObject interface {
	VisitGetUsersMeCheckinTasksResponse(w http.ResponseWriter) error
}

type GetUsersMeCheckinTasks200JSONResponse struct {
	Code string `json:"code"`
	Data []struct {
		// CreatedAt 创建时间（Unix时间戳，单位：秒）
		CreatedAt int `json:"createdAt,omitempty"`

		// Description 任务描述
		Description string `json:"description,omitempty"`

		// EndTime 签到结束时间（Unix时间戳，单位：秒）
		EndTime int `json:"endTime"`

		// GroupId 所属用户组ID
		GroupId int `json:"groupId,omitempty"`

		// GroupName 用户组的名称
		GroupName       *string           `json:"groupName,omitempty"`
		MyCheckinStatus UserCheckinStatus `json:"myCheckinStatus,omitempty"`

		// StartTime 签到开始时间（Unix时间戳，单位：秒）
		StartTime int `json:"startTime"`

		// Status 任务状态
		Status CheckinTaskStatus `json:"status"`

		// TaskId 签到任务ID
		TaskId int `json:"taskId,omitempty"`

		// TaskName 任务名称
		TaskName string `json:"taskName"`

		// VerificationConfig 签到任务的验证配置项
		VerificationConfig struct {
			// CheckinMethods 校验方式组合
			CheckinMethods CheckinMethods `json:"checkinMethods"`
		} `json:"verificationConfig"`
	} `json:"data"`
}

func (response GetUsersMeCheckinTasks200JSONResponse) VisitGetUsersMeCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeCheckinTasks401JSONResponse Unauthorized

func (response GetUsersMeCheckinTasks401JSONResponse) VisitGetUsersMeCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeCheckinTasks500JSONResponse InternalServerError

func (response GetUsersMeCheckinTasks500JSONResponse) VisitGetUsersMeCheckinTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// CheckinTasksStrictServerInterface represents all server handlers.
type CheckinTasksStrictServerInterface interface {
	// 删除签到任务
	// (DELETE /checkin-tasks/{taskId})
	DeleteCheckinTasksTaskId(ctx context.Context, request DeleteCheckinTasksTaskIdRequestObject) (DeleteCheckinTasksTaskIdResponseObject, error)
	// 获取签到任务详细信息
	// (GET /checkin-tasks/{taskId})
	GetCheckinTasksTaskId(ctx context.Context, request GetCheckinTasksTaskIdRequestObject) (GetCheckinTasksTaskIdResponseObject, error)
	// 更新签到任务
	// (PUT /checkin-tasks/{taskId})
	PutCheckinTasksTaskId(ctx context.Context, request PutCheckinTasksTaskIdRequestObject) (PutCheckinTasksTaskIdResponseObject, error)
	// 验证签到信息
	// (POST /checkin-tasks/{taskId}/verify)
	PostCheckinTasksTaskIdVerify(ctx context.Context, request PostCheckinTasksTaskIdVerifyRequestObject) (PostCheckinTasksTaskIdVerifyResponseObject, error)
	// 获取用户组的签到任务列表
	// (GET /groups/{groupId}/checkin-tasks)
	GetGroupsGroupIdCheckinTasks(ctx context.Context, request GetGroupsGroupIdCheckinTasksRequestObject) (GetGroupsGroupIdCheckinTasksResponseObject, error)
	// 创建签到任务
	// (POST /groups/{groupId}/checkin-tasks)
	PostGroupsGroupIdCheckinTasks(ctx context.Context, request PostGroupsGroupIdCheckinTasksRequestObject) (PostGroupsGroupIdCheckinTasksResponseObject, error)
	// 获取当前用户的签到任务
	// (GET /users/me/checkin-tasks)
	GetUsersMeCheckinTasks(ctx context.Context, request GetUsersMeCheckinTasksRequestObject) (GetUsersMeCheckinTasksResponseObject, error)
}

type CheckinTasksStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type CheckinTasksStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewCheckinTasksStrictHandler(ssi CheckinTasksStrictServerInterface, middlewares []CheckinTasksStrictMiddlewareFunc) CheckinTasksServerInterface {
	return &CheckinTasksstrictHandler{ssi: ssi, middlewares: middlewares}
}

type CheckinTasksstrictHandler struct {
	ssi         CheckinTasksStrictServerInterface
	middlewares []CheckinTasksStrictMiddlewareFunc
}

// DeleteCheckinTasksTaskId 操作中间件
func (sh *CheckinTasksstrictHandler) DeleteCheckinTasksTaskId(ctx *gin.Context, taskId int) {
	var request DeleteCheckinTasksTaskIdRequestObject

	request.TaskId = taskId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCheckinTasksTaskId(ctx, request.(DeleteCheckinTasksTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCheckinTasksTaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCheckinTasksTaskIdResponseObject); ok {
		if err := validResponse.VisitDeleteCheckinTasksTaskIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCheckinTasksTaskId 操作中间件
func (sh *CheckinTasksstrictHandler) GetCheckinTasksTaskId(ctx *gin.Context, taskId int) {
	var request GetCheckinTasksTaskIdRequestObject

	request.TaskId = taskId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCheckinTasksTaskId(ctx, request.(GetCheckinTasksTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCheckinTasksTaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCheckinTasksTaskIdResponseObject); ok {
		if err := validResponse.VisitGetCheckinTasksTaskIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCheckinTasksTaskId 操作中间件
func (sh *CheckinTasksstrictHandler) PutCheckinTasksTaskId(ctx *gin.Context, taskId int) {
	var request PutCheckinTasksTaskIdRequestObject

	request.TaskId = taskId

	var body PutCheckinTasksTaskIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCheckinTasksTaskId(ctx, request.(PutCheckinTasksTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCheckinTasksTaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCheckinTasksTaskIdResponseObject); ok {
		if err := validResponse.VisitPutCheckinTasksTaskIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCheckinTasksTaskIdVerify 操作中间件
func (sh *CheckinTasksstrictHandler) PostCheckinTasksTaskIdVerify(ctx *gin.Context, taskId int) {
	var request PostCheckinTasksTaskIdVerifyRequestObject

	request.TaskId = taskId

	var body PostCheckinTasksTaskIdVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCheckinTasksTaskIdVerify(ctx, request.(PostCheckinTasksTaskIdVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCheckinTasksTaskIdVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCheckinTasksTaskIdVerifyResponseObject); ok {
		if err := validResponse.VisitPostCheckinTasksTaskIdVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupsGroupIdCheckinTasks 操作中间件
func (sh *CheckinTasksstrictHandler) GetGroupsGroupIdCheckinTasks(ctx *gin.Context, groupId int) {
	var request GetGroupsGroupIdCheckinTasksRequestObject

	request.GroupId = groupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupsGroupIdCheckinTasks(ctx, request.(GetGroupsGroupIdCheckinTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupsGroupIdCheckinTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsGroupIdCheckinTasksResponseObject); ok {
		if err := validResponse.VisitGetGroupsGroupIdCheckinTasksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGroupsGroupIdCheckinTasks 操作中间件
func (sh *CheckinTasksstrictHandler) PostGroupsGroupIdCheckinTasks(ctx *gin.Context, groupId int) {
	var request PostGroupsGroupIdCheckinTasksRequestObject

	request.GroupId = groupId

	var body PostGroupsGroupIdCheckinTasksJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGroupsGroupIdCheckinTasks(ctx, request.(PostGroupsGroupIdCheckinTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGroupsGroupIdCheckinTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostGroupsGroupIdCheckinTasksResponseObject); ok {
		if err := validResponse.VisitPostGroupsGroupIdCheckinTasksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMeCheckinTasks 操作中间件
func (sh *CheckinTasksstrictHandler) GetUsersMeCheckinTasks(ctx *gin.Context) {
	var request GetUsersMeCheckinTasksRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMeCheckinTasks(ctx, request.(GetUsersMeCheckinTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMeCheckinTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersMeCheckinTasksResponseObject); ok {
		if err := validResponse.VisitGetUsersMeCheckinTasksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
