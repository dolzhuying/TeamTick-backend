// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// GroupsServerInterface 代表所有服务器处理程序。
type GroupsServerInterface interface {
	// 获取用户相关的用户组列表
	// (GET /groups)
	GetGroups(c *gin.Context, params GetGroupsParams)
	// 创建用户组
	// (POST /groups)
	PostGroups(c *gin.Context)
	// 删除用户组
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(c *gin.Context, groupId int)
	// 获取用户组详细信息
	// (GET /groups/{groupId})
	GetGroupsGroupId(c *gin.Context, groupId int)
	// 修改用户组信息
	// (PUT /groups/{groupId})
	PutGroupsGroupId(c *gin.Context, groupId int)
	// 查看用户组的加入申请列表
	// (GET /groups/{groupId}/join-requests)
	GetGroupsGroupIdJoinRequests(c *gin.Context, groupId int, params GetGroupsGroupIdJoinRequestsParams)
	// 申请加入用户组
	// (POST /groups/{groupId}/join-requests)
	PostGroupsGroupIdJoinRequests(c *gin.Context, groupId int)
	// 处理用户组加入申请
	// (PUT /groups/{groupId}/join-requests/{requestId})
	PutGroupsGroupIdJoinRequestsRequestId(c *gin.Context, groupId int, requestId int)
	// 获取用户组成员列表
	// (GET /groups/{groupId}/members)
	GetGroupsGroupIdMembers(c *gin.Context, groupId int)
	// 移除用户组成员
	// (DELETE /groups/{groupId}/members/{userId})
	DeleteGroupsGroupIdMembersUserId(c *gin.Context, groupId int, userId int)
	// 查询当前用户在用户组中的状态
	// (GET /groups/{groupId}/my-status)
	GetGroupsGroupIdMyStatus(c *gin.Context, groupId int)
}

// GroupsServerInterfaceWrapper 将上下文转换为参数。
type GroupsServerInterfaceWrapper struct {
	Handler            GroupsServerInterface
	HandlerMiddlewares []GroupsMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type GroupsMiddlewareFunc func(c *gin.Context)

// GetGroups 操作中间件
func (siw *GroupsServerInterfaceWrapper) GetGroups(c *gin.Context) {

	var err error

	// 参数对象，我们将从上下文中解析所有参数到此对象
	var params GetGroupsParams

	// ------------- 可选查询参数 "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 filter 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroups(c, params)
}

// PostGroups 操作中间件
func (siw *GroupsServerInterfaceWrapper) PostGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId 操作中间件
func (siw *GroupsServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId 操作中间件
func (siw *GroupsServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId 操作中间件
func (siw *GroupsServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetGroupsGroupIdJoinRequests 操作中间件
func (siw *GroupsServerInterfaceWrapper) GetGroupsGroupIdJoinRequests(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// 参数对象，我们将从上下文中解析所有参数到此对象
	var params GetGroupsGroupIdJoinRequestsParams

	// ------------- 可选查询参数 "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 status 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupIdJoinRequests(c, groupId, params)
}

// PostGroupsGroupIdJoinRequests 操作中间件
func (siw *GroupsServerInterfaceWrapper) PostGroupsGroupIdJoinRequests(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroupsGroupIdJoinRequests(c, groupId)
}

// PutGroupsGroupIdJoinRequestsRequestId 操作中间件
func (siw *GroupsServerInterfaceWrapper) PutGroupsGroupIdJoinRequestsRequestId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 路径参数 "requestId" -------------
	var requestId int

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", c.Param("requestId"), &requestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 requestId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutGroupsGroupIdJoinRequestsRequestId(c, groupId, requestId)
}

// GetGroupsGroupIdMembers 操作中间件
func (siw *GroupsServerInterfaceWrapper) GetGroupsGroupIdMembers(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupIdMembers(c, groupId)
}

// DeleteGroupsGroupIdMembersUserId 操作中间件
func (siw *GroupsServerInterfaceWrapper) DeleteGroupsGroupIdMembersUserId(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- 路径参数 "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 userId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupsGroupIdMembersUserId(c, groupId, userId)
}

// GetGroupsGroupIdMyStatus 操作中间件
func (siw *GroupsServerInterfaceWrapper) GetGroupsGroupIdMyStatus(c *gin.Context) {

	var err error

	// ------------- 路径参数 "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 groupId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupIdMyStatus(c, groupId)
}

// GroupsGinServerOptions 提供 Gin 服务器的选项。
type GroupsGinServerOptions struct {
	BaseURL      string
	Middlewares  []GroupsMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterGroupsHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterGroupsHandlers(router gin.IRouter, si GroupsServerInterface) {
	RegisterGroupsHandlersWithOptions(router, si, GroupsGinServerOptions{})
}

// RegisterGroupsHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterGroupsHandlersWithOptions(router gin.IRouter, si GroupsServerInterface, options GroupsGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := GroupsServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)
	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)
	router.DELETE(options.BaseURL+"/groups/:groupId", wrapper.DeleteGroupsGroupId)
	router.GET(options.BaseURL+"/groups/:groupId", wrapper.GetGroupsGroupId)
	router.PUT(options.BaseURL+"/groups/:groupId", wrapper.PutGroupsGroupId)
	router.GET(options.BaseURL+"/groups/:groupId/join-requests", wrapper.GetGroupsGroupIdJoinRequests)
	router.POST(options.BaseURL+"/groups/:groupId/join-requests", wrapper.PostGroupsGroupIdJoinRequests)
	router.PUT(options.BaseURL+"/groups/:groupId/join-requests/:requestId", wrapper.PutGroupsGroupIdJoinRequestsRequestId)
	router.GET(options.BaseURL+"/groups/:groupId/members", wrapper.GetGroupsGroupIdMembers)
	router.DELETE(options.BaseURL+"/groups/:groupId/members/:userId", wrapper.DeleteGroupsGroupIdMembersUserId)
	router.GET(options.BaseURL+"/groups/:groupId/my-status", wrapper.GetGroupsGroupIdMyStatus)
}

type GetGroupsRequestObject struct {
	Params GetGroupsParams
}

type GetGroupsResponseObject interface {
	VisitGetGroupsResponse(w http.ResponseWriter) error
}

type GetGroups200JSONResponse struct {
	Code string `json:"code"`
	Data []struct {
		// CreatedAt 创建时间（Unix时间戳，单位：秒）
		CreatedAt int `json:"createdAt,omitempty"`

		// CreatorId 创建者用户ID
		CreatorId int `json:"creatorId,omitempty"`

		// CreatorName 创建者用户名
		CreatorName string `json:"creatorName,omitempty"`

		// Description 用户组描述
		Description string `json:"description,omitempty"`

		// GroupId 用户组ID
		GroupId int `json:"groupId,omitempty"`

		// GroupName 用户组名称
		GroupName string `json:"groupName,omitempty"`

		// MemberCount 成员数量
		MemberCount int       `json:"memberCount,omitempty"`
		RoleInGroup GroupRole `json:"roleInGroup,omitempty"`
	} `json:"data"`
}

func (response GetGroups200JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroups401JSONResponse Unauthorized

func (response GetGroups401JSONResponse) VisitGetGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsRequestObject struct {
	Body *PostGroupsJSONRequestBody
}

type PostGroupsResponseObject interface {
	VisitPostGroupsResponse(w http.ResponseWriter) error
}

type PostGroups201JSONResponse struct {
	Code string `json:"code"`
	Data Group  `json:"data"`
}

func (response PostGroups201JSONResponse) VisitPostGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostGroups400JSONResponse BadRequest

func (response PostGroups400JSONResponse) VisitPostGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostGroups401JSONResponse Unauthorized

func (response PostGroups401JSONResponse) VisitPostGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostGroups500JSONResponse InternalServerError

func (response PostGroups500JSONResponse) VisitPostGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupIdRequestObject struct {
	GroupId int `json:"groupId"`
}

type DeleteGroupsGroupIdResponseObject interface {
	VisitDeleteGroupsGroupIdResponse(w http.ResponseWriter) error
}

type DeleteGroupsGroupId200JSONResponse Success

func (response DeleteGroupsGroupId200JSONResponse) VisitDeleteGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupId401JSONResponse Unauthorized

func (response DeleteGroupsGroupId401JSONResponse) VisitDeleteGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupId403JSONResponse Forbidden

func (response DeleteGroupsGroupId403JSONResponse) VisitDeleteGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupId404JSONResponse NotFound

func (response DeleteGroupsGroupId404JSONResponse) VisitDeleteGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupId409JSONResponse Conflict

func (response DeleteGroupsGroupId409JSONResponse) VisitDeleteGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdRequestObject struct {
	GroupId int `json:"groupId"`
}

type GetGroupsGroupIdResponseObject interface {
	VisitGetGroupsGroupIdResponse(w http.ResponseWriter) error
}

type GetGroupsGroupId200JSONResponse struct {
	Code string `json:"code"`
	Data Group  `json:"data"`
}

func (response GetGroupsGroupId200JSONResponse) VisitGetGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupId401JSONResponse Unauthorized

func (response GetGroupsGroupId401JSONResponse) VisitGetGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupId403JSONResponse Forbidden

func (response GetGroupsGroupId403JSONResponse) VisitGetGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupId404JSONResponse NotFound

func (response GetGroupsGroupId404JSONResponse) VisitGetGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdRequestObject struct {
	GroupId int `json:"groupId"`
	Body    *PutGroupsGroupIdJSONRequestBody
}

type PutGroupsGroupIdResponseObject interface {
	VisitPutGroupsGroupIdResponse(w http.ResponseWriter) error
}

type PutGroupsGroupId200JSONResponse struct {
	Code string `json:"code"`
	Data Group  `json:"data"`
}

func (response PutGroupsGroupId200JSONResponse) VisitPutGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupId400JSONResponse BadRequest

func (response PutGroupsGroupId400JSONResponse) VisitPutGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupId401JSONResponse Unauthorized

func (response PutGroupsGroupId401JSONResponse) VisitPutGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupId403JSONResponse Forbidden

func (response PutGroupsGroupId403JSONResponse) VisitPutGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupId404JSONResponse NotFound

func (response PutGroupsGroupId404JSONResponse) VisitPutGroupsGroupIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdJoinRequestsRequestObject struct {
	GroupId int `json:"groupId"`
	Params  GetGroupsGroupIdJoinRequestsParams
}

type GetGroupsGroupIdJoinRequestsResponseObject interface {
	VisitGetGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error
}

type GetGroupsGroupIdJoinRequests200JSONResponse struct {
	Code string        `json:"code"`
	Data []JoinRequest `json:"data"`
}

func (response GetGroupsGroupIdJoinRequests200JSONResponse) VisitGetGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdJoinRequests401JSONResponse Unauthorized

func (response GetGroupsGroupIdJoinRequests401JSONResponse) VisitGetGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdJoinRequests403JSONResponse Forbidden

func (response GetGroupsGroupIdJoinRequests403JSONResponse) VisitGetGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdJoinRequests404JSONResponse NotFound

func (response GetGroupsGroupIdJoinRequests404JSONResponse) VisitGetGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdJoinRequests500JSONResponse InternalServerError

func (response GetGroupsGroupIdJoinRequests500JSONResponse) VisitGetGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdJoinRequestsRequestObject struct {
	GroupId int `json:"groupId"`
	Body    *PostGroupsGroupIdJoinRequestsJSONRequestBody
}

type PostGroupsGroupIdJoinRequestsResponseObject interface {
	VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error
}

type PostGroupsGroupIdJoinRequests201JSONResponse struct {
	Code string      `json:"code"`
	Data JoinRequest `json:"data"`
}

func (response PostGroupsGroupIdJoinRequests201JSONResponse) VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdJoinRequests401JSONResponse Unauthorized

func (response PostGroupsGroupIdJoinRequests401JSONResponse) VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdJoinRequests403JSONResponse Forbidden

func (response PostGroupsGroupIdJoinRequests403JSONResponse) VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdJoinRequests404JSONResponse NotFound

func (response PostGroupsGroupIdJoinRequests404JSONResponse) VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdJoinRequests409JSONResponse Conflict

func (response PostGroupsGroupIdJoinRequests409JSONResponse) VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupsGroupIdJoinRequests500JSONResponse InternalServerError

func (response PostGroupsGroupIdJoinRequests500JSONResponse) VisitPostGroupsGroupIdJoinRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestIdRequestObject struct {
	GroupId   int `json:"groupId"`
	RequestId int `json:"requestId"`
	Body      *PutGroupsGroupIdJoinRequestsRequestIdJSONRequestBody
}

type PutGroupsGroupIdJoinRequestsRequestIdResponseObject interface {
	VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error
}

type PutGroupsGroupIdJoinRequestsRequestId200JSONResponse Success

func (response PutGroupsGroupIdJoinRequestsRequestId200JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestId400JSONResponse BadRequest

func (response PutGroupsGroupIdJoinRequestsRequestId400JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestId401JSONResponse Unauthorized

func (response PutGroupsGroupIdJoinRequestsRequestId401JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestId403JSONResponse Forbidden

func (response PutGroupsGroupIdJoinRequestsRequestId403JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestId404JSONResponse NotFound

func (response PutGroupsGroupIdJoinRequestsRequestId404JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestId409JSONResponse Conflict

func (response PutGroupsGroupIdJoinRequestsRequestId409JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PutGroupsGroupIdJoinRequestsRequestId500JSONResponse InternalServerError

func (response PutGroupsGroupIdJoinRequestsRequestId500JSONResponse) VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMembersRequestObject struct {
	GroupId int `json:"groupId"`
}

type GetGroupsGroupIdMembersResponseObject interface {
	VisitGetGroupsGroupIdMembersResponse(w http.ResponseWriter) error
}

type GetGroupsGroupIdMembers200JSONResponse struct {
	Code string        `json:"code"`
	Data []GroupMember `json:"data"`
}

func (response GetGroupsGroupIdMembers200JSONResponse) VisitGetGroupsGroupIdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMembers401JSONResponse Unauthorized

func (response GetGroupsGroupIdMembers401JSONResponse) VisitGetGroupsGroupIdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMembers403JSONResponse Forbidden

func (response GetGroupsGroupIdMembers403JSONResponse) VisitGetGroupsGroupIdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMembers404JSONResponse NotFound

func (response GetGroupsGroupIdMembers404JSONResponse) VisitGetGroupsGroupIdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMembers500JSONResponse InternalServerError

func (response GetGroupsGroupIdMembers500JSONResponse) VisitGetGroupsGroupIdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupIdMembersUserIdRequestObject struct {
	GroupId int `json:"groupId"`
	UserId  int `json:"userId"`
}

type DeleteGroupsGroupIdMembersUserIdResponseObject interface {
	VisitDeleteGroupsGroupIdMembersUserIdResponse(w http.ResponseWriter) error
}

type DeleteGroupsGroupIdMembersUserId200JSONResponse Success

func (response DeleteGroupsGroupIdMembersUserId200JSONResponse) VisitDeleteGroupsGroupIdMembersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupIdMembersUserId401JSONResponse Unauthorized

func (response DeleteGroupsGroupIdMembersUserId401JSONResponse) VisitDeleteGroupsGroupIdMembersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupIdMembersUserId403JSONResponse Forbidden

func (response DeleteGroupsGroupIdMembersUserId403JSONResponse) VisitDeleteGroupsGroupIdMembersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupIdMembersUserId404JSONResponse NotFound

func (response DeleteGroupsGroupIdMembersUserId404JSONResponse) VisitDeleteGroupsGroupIdMembersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupsGroupIdMembersUserId500JSONResponse InternalServerError

func (response DeleteGroupsGroupIdMembersUserId500JSONResponse) VisitDeleteGroupsGroupIdMembersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMyStatusRequestObject struct {
	GroupId int `json:"groupId"`
}

type GetGroupsGroupIdMyStatusResponseObject interface {
	VisitGetGroupsGroupIdMyStatusResponse(w http.ResponseWriter) error
}

type GetGroupsGroupIdMyStatus200JSONResponse struct {
	Code string `json:"code"`
	Data struct {
		// JoinRequestId 加入申请ID (仅当status为pending或rejected时有值)
		JoinRequestId int `json:"joinRequestId,omitempty"`

		// Message 附加信息说明 (可选)
		Message string `json:"message,omitempty"`

		// Status 用户在组中的状态：none(未关联)、pending(申请中)、member(普通成员)、rejected(申请被拒绝)
		Status GroupMembershipStatus `json:"status"`
	} `json:"data"`
}

func (response GetGroupsGroupIdMyStatus200JSONResponse) VisitGetGroupsGroupIdMyStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMyStatus401JSONResponse Unauthorized

func (response GetGroupsGroupIdMyStatus401JSONResponse) VisitGetGroupsGroupIdMyStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMyStatus404JSONResponse NotFound

func (response GetGroupsGroupIdMyStatus404JSONResponse) VisitGetGroupsGroupIdMyStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupsGroupIdMyStatus500JSONResponse InternalServerError

func (response GetGroupsGroupIdMyStatus500JSONResponse) VisitGetGroupsGroupIdMyStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// GroupsStrictServerInterface represents all server handlers.
type GroupsStrictServerInterface interface {
	// 获取用户相关的用户组列表
	// (GET /groups)
	GetGroups(ctx context.Context, request GetGroupsRequestObject) (GetGroupsResponseObject, error)
	// 创建用户组
	// (POST /groups)
	PostGroups(ctx context.Context, request PostGroupsRequestObject) (PostGroupsResponseObject, error)
	// 删除用户组
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(ctx context.Context, request DeleteGroupsGroupIdRequestObject) (DeleteGroupsGroupIdResponseObject, error)
	// 获取用户组详细信息
	// (GET /groups/{groupId})
	GetGroupsGroupId(ctx context.Context, request GetGroupsGroupIdRequestObject) (GetGroupsGroupIdResponseObject, error)
	// 修改用户组信息
	// (PUT /groups/{groupId})
	PutGroupsGroupId(ctx context.Context, request PutGroupsGroupIdRequestObject) (PutGroupsGroupIdResponseObject, error)
	// 查看用户组的加入申请列表
	// (GET /groups/{groupId}/join-requests)
	GetGroupsGroupIdJoinRequests(ctx context.Context, request GetGroupsGroupIdJoinRequestsRequestObject) (GetGroupsGroupIdJoinRequestsResponseObject, error)
	// 申请加入用户组
	// (POST /groups/{groupId}/join-requests)
	PostGroupsGroupIdJoinRequests(ctx context.Context, request PostGroupsGroupIdJoinRequestsRequestObject) (PostGroupsGroupIdJoinRequestsResponseObject, error)
	// 处理用户组加入申请
	// (PUT /groups/{groupId}/join-requests/{requestId})
	PutGroupsGroupIdJoinRequestsRequestId(ctx context.Context, request PutGroupsGroupIdJoinRequestsRequestIdRequestObject) (PutGroupsGroupIdJoinRequestsRequestIdResponseObject, error)
	// 获取用户组成员列表
	// (GET /groups/{groupId}/members)
	GetGroupsGroupIdMembers(ctx context.Context, request GetGroupsGroupIdMembersRequestObject) (GetGroupsGroupIdMembersResponseObject, error)
	// 移除用户组成员
	// (DELETE /groups/{groupId}/members/{userId})
	DeleteGroupsGroupIdMembersUserId(ctx context.Context, request DeleteGroupsGroupIdMembersUserIdRequestObject) (DeleteGroupsGroupIdMembersUserIdResponseObject, error)
	// 查询当前用户在用户组中的状态
	// (GET /groups/{groupId}/my-status)
	GetGroupsGroupIdMyStatus(ctx context.Context, request GetGroupsGroupIdMyStatusRequestObject) (GetGroupsGroupIdMyStatusResponseObject, error)
}

type GroupsStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type GroupsStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewGroupsStrictHandler(ssi GroupsStrictServerInterface, middlewares []GroupsStrictMiddlewareFunc) GroupsServerInterface {
	return &GroupsstrictHandler{ssi: ssi, middlewares: middlewares}
}

type GroupsstrictHandler struct {
	ssi         GroupsStrictServerInterface
	middlewares []GroupsStrictMiddlewareFunc
}

// GetGroups 操作中间件
func (sh *GroupsstrictHandler) GetGroups(ctx *gin.Context, params GetGroupsParams) {
	var request GetGroupsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroups(ctx, request.(GetGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsResponseObject); ok {
		if err := validResponse.VisitGetGroupsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGroups 操作中间件
func (sh *GroupsstrictHandler) PostGroups(ctx *gin.Context) {
	var request PostGroupsRequestObject

	var body PostGroupsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGroups(ctx, request.(PostGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostGroupsResponseObject); ok {
		if err := validResponse.VisitPostGroupsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroupsGroupId 操作中间件
func (sh *GroupsstrictHandler) DeleteGroupsGroupId(ctx *gin.Context, groupId int) {
	var request DeleteGroupsGroupIdRequestObject

	request.GroupId = groupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupsGroupId(ctx, request.(DeleteGroupsGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupsGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteGroupsGroupIdResponseObject); ok {
		if err := validResponse.VisitDeleteGroupsGroupIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupsGroupId 操作中间件
func (sh *GroupsstrictHandler) GetGroupsGroupId(ctx *gin.Context, groupId int) {
	var request GetGroupsGroupIdRequestObject

	request.GroupId = groupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupsGroupId(ctx, request.(GetGroupsGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupsGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsGroupIdResponseObject); ok {
		if err := validResponse.VisitGetGroupsGroupIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutGroupsGroupId 操作中间件
func (sh *GroupsstrictHandler) PutGroupsGroupId(ctx *gin.Context, groupId int) {
	var request PutGroupsGroupIdRequestObject

	request.GroupId = groupId

	var body PutGroupsGroupIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutGroupsGroupId(ctx, request.(PutGroupsGroupIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutGroupsGroupId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutGroupsGroupIdResponseObject); ok {
		if err := validResponse.VisitPutGroupsGroupIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupsGroupIdJoinRequests 操作中间件
func (sh *GroupsstrictHandler) GetGroupsGroupIdJoinRequests(ctx *gin.Context, groupId int, params GetGroupsGroupIdJoinRequestsParams) {
	var request GetGroupsGroupIdJoinRequestsRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupsGroupIdJoinRequests(ctx, request.(GetGroupsGroupIdJoinRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupsGroupIdJoinRequests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsGroupIdJoinRequestsResponseObject); ok {
		if err := validResponse.VisitGetGroupsGroupIdJoinRequestsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGroupsGroupIdJoinRequests 操作中间件
func (sh *GroupsstrictHandler) PostGroupsGroupIdJoinRequests(ctx *gin.Context, groupId int) {
	var request PostGroupsGroupIdJoinRequestsRequestObject

	request.GroupId = groupId

	var body PostGroupsGroupIdJoinRequestsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGroupsGroupIdJoinRequests(ctx, request.(PostGroupsGroupIdJoinRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGroupsGroupIdJoinRequests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostGroupsGroupIdJoinRequestsResponseObject); ok {
		if err := validResponse.VisitPostGroupsGroupIdJoinRequestsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutGroupsGroupIdJoinRequestsRequestId 操作中间件
func (sh *GroupsstrictHandler) PutGroupsGroupIdJoinRequestsRequestId(ctx *gin.Context, groupId int, requestId int) {
	var request PutGroupsGroupIdJoinRequestsRequestIdRequestObject

	request.GroupId = groupId
	request.RequestId = requestId

	var body PutGroupsGroupIdJoinRequestsRequestIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutGroupsGroupIdJoinRequestsRequestId(ctx, request.(PutGroupsGroupIdJoinRequestsRequestIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutGroupsGroupIdJoinRequestsRequestId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutGroupsGroupIdJoinRequestsRequestIdResponseObject); ok {
		if err := validResponse.VisitPutGroupsGroupIdJoinRequestsRequestIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupsGroupIdMembers 操作中间件
func (sh *GroupsstrictHandler) GetGroupsGroupIdMembers(ctx *gin.Context, groupId int) {
	var request GetGroupsGroupIdMembersRequestObject

	request.GroupId = groupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupsGroupIdMembers(ctx, request.(GetGroupsGroupIdMembersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupsGroupIdMembers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsGroupIdMembersResponseObject); ok {
		if err := validResponse.VisitGetGroupsGroupIdMembersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroupsGroupIdMembersUserId 操作中间件
func (sh *GroupsstrictHandler) DeleteGroupsGroupIdMembersUserId(ctx *gin.Context, groupId int, userId int) {
	var request DeleteGroupsGroupIdMembersUserIdRequestObject

	request.GroupId = groupId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupsGroupIdMembersUserId(ctx, request.(DeleteGroupsGroupIdMembersUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupsGroupIdMembersUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteGroupsGroupIdMembersUserIdResponseObject); ok {
		if err := validResponse.VisitDeleteGroupsGroupIdMembersUserIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupsGroupIdMyStatus 操作中间件
func (sh *GroupsstrictHandler) GetGroupsGroupIdMyStatus(ctx *gin.Context, groupId int) {
	var request GetGroupsGroupIdMyStatusRequestObject

	request.GroupId = groupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupsGroupIdMyStatus(ctx, request.(GetGroupsGroupIdMyStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupsGroupIdMyStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupsGroupIdMyStatusResponseObject); ok {
		if err := validResponse.VisitGetGroupsGroupIdMyStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
