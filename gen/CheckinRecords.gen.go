// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// CheckinRecordsServerInterface 代表所有服务器处理程序。
type CheckinRecordsServerInterface interface {
	// 执行签到
	// (POST /checkin-tasks/{taskId}/checkin)
	PostCheckinTasksTaskIdCheckin(c *gin.Context, taskId int)
	// 获取签到任务的签到记录列表 (管理员视角)
	// (GET /checkin-tasks/{taskId}/records)
	GetCheckinTasksTaskIdRecords(c *gin.Context, taskId int)
	// 获取当前用户签到记录
	// (GET /users/me/checkin-records)
	GetUsersMeCheckinRecords(c *gin.Context)
}

// CheckinRecordsServerInterfaceWrapper 将上下文转换为参数。
type CheckinRecordsServerInterfaceWrapper struct {
	Handler            CheckinRecordsServerInterface
	HandlerMiddlewares []CheckinRecordsMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type CheckinRecordsMiddlewareFunc func(c *gin.Context)

// PostCheckinTasksTaskIdCheckin 操作中间件
func (siw *CheckinRecordsServerInterfaceWrapper) PostCheckinTasksTaskIdCheckin(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCheckinTasksTaskIdCheckin(c, taskId)
}

// GetCheckinTasksTaskIdRecords 操作中间件
func (siw *CheckinRecordsServerInterfaceWrapper) GetCheckinTasksTaskIdRecords(c *gin.Context) {

	var err error

	// ------------- 路径参数 "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("参数 taskId 格式无效: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCheckinTasksTaskIdRecords(c, taskId)
}

// GetUsersMeCheckinRecords 操作中间件
func (siw *CheckinRecordsServerInterfaceWrapper) GetUsersMeCheckinRecords(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersMeCheckinRecords(c)
}

// CheckinRecordsGinServerOptions 提供 Gin 服务器的选项。
type CheckinRecordsGinServerOptions struct {
	BaseURL      string
	Middlewares  []CheckinRecordsMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterCheckinRecordsHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterCheckinRecordsHandlers(router gin.IRouter, si CheckinRecordsServerInterface) {
	RegisterCheckinRecordsHandlersWithOptions(router, si, CheckinRecordsGinServerOptions{})
}

// RegisterCheckinRecordsHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterCheckinRecordsHandlersWithOptions(router gin.IRouter, si CheckinRecordsServerInterface, options CheckinRecordsGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := CheckinRecordsServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/checkin-tasks/:taskId/checkin", wrapper.PostCheckinTasksTaskIdCheckin)
	router.GET(options.BaseURL+"/checkin-tasks/:taskId/records", wrapper.GetCheckinTasksTaskIdRecords)
	router.GET(options.BaseURL+"/users/me/checkin-records", wrapper.GetUsersMeCheckinRecords)
}

type PostCheckinTasksTaskIdCheckinRequestObject struct {
	TaskId int `json:"taskId"`
	Body   *PostCheckinTasksTaskIdCheckinJSONRequestBody
}

type PostCheckinTasksTaskIdCheckinResponseObject interface {
	VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error
}

type PostCheckinTasksTaskIdCheckin200JSONResponse struct {
	Code string `json:"code"`
	Data struct {
		// RecordId 签到记录ID
		RecordId int `json:"recordId"`

		// SignedTime 签到时间戳（秒）
		SignedTime int `json:"signedTime"`

		// Success 签到是否成功
		Success bool `json:"success"`
	} `json:"data"`
}

func (response PostCheckinTasksTaskIdCheckin200JSONResponse) VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdCheckin400JSONResponse BadRequest

func (response PostCheckinTasksTaskIdCheckin400JSONResponse) VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdCheckin401JSONResponse Unauthorized

func (response PostCheckinTasksTaskIdCheckin401JSONResponse) VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdCheckin403JSONResponse Forbidden

func (response PostCheckinTasksTaskIdCheckin403JSONResponse) VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdCheckin404JSONResponse NotFound

func (response PostCheckinTasksTaskIdCheckin404JSONResponse) VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostCheckinTasksTaskIdCheckin500JSONResponse InternalServerError

func (response PostCheckinTasksTaskIdCheckin500JSONResponse) VisitPostCheckinTasksTaskIdCheckinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskIdRecordsRequestObject struct {
	TaskId int `json:"taskId"`
}

type GetCheckinTasksTaskIdRecordsResponseObject interface {
	VisitGetCheckinTasksTaskIdRecordsResponse(w http.ResponseWriter) error
}

type GetCheckinTasksTaskIdRecords200JSONResponse struct {
	Code string `json:"code"`

	// Data 所有成功签到的成员记录
	Data []CheckinRecord `json:"data"`
}

func (response GetCheckinTasksTaskIdRecords200JSONResponse) VisitGetCheckinTasksTaskIdRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskIdRecords401JSONResponse Unauthorized

func (response GetCheckinTasksTaskIdRecords401JSONResponse) VisitGetCheckinTasksTaskIdRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskIdRecords403JSONResponse Forbidden

func (response GetCheckinTasksTaskIdRecords403JSONResponse) VisitGetCheckinTasksTaskIdRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskIdRecords404JSONResponse NotFound

func (response GetCheckinTasksTaskIdRecords404JSONResponse) VisitGetCheckinTasksTaskIdRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCheckinTasksTaskIdRecords500JSONResponse InternalServerError

func (response GetCheckinTasksTaskIdRecords500JSONResponse) VisitGetCheckinTasksTaskIdRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeCheckinRecordsRequestObject struct {
}

type GetUsersMeCheckinRecordsResponseObject interface {
	VisitGetUsersMeCheckinRecordsResponse(w http.ResponseWriter) error
}

type GetUsersMeCheckinRecords200JSONResponse struct {
	Code string          `json:"code"`
	Data []CheckinRecord `json:"data"`
}

func (response GetUsersMeCheckinRecords200JSONResponse) VisitGetUsersMeCheckinRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeCheckinRecords401JSONResponse Unauthorized

func (response GetUsersMeCheckinRecords401JSONResponse) VisitGetUsersMeCheckinRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeCheckinRecords500JSONResponse InternalServerError

func (response GetUsersMeCheckinRecords500JSONResponse) VisitGetUsersMeCheckinRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// CheckinRecordsStrictServerInterface represents all server handlers.
type CheckinRecordsStrictServerInterface interface {
	// 执行签到
	// (POST /checkin-tasks/{taskId}/checkin)
	PostCheckinTasksTaskIdCheckin(ctx context.Context, request PostCheckinTasksTaskIdCheckinRequestObject) (PostCheckinTasksTaskIdCheckinResponseObject, error)
	// 获取签到任务的签到记录列表 (管理员视角)
	// (GET /checkin-tasks/{taskId}/records)
	GetCheckinTasksTaskIdRecords(ctx context.Context, request GetCheckinTasksTaskIdRecordsRequestObject) (GetCheckinTasksTaskIdRecordsResponseObject, error)
	// 获取当前用户签到记录
	// (GET /users/me/checkin-records)
	GetUsersMeCheckinRecords(ctx context.Context, request GetUsersMeCheckinRecordsRequestObject) (GetUsersMeCheckinRecordsResponseObject, error)
}

type CheckinRecordsStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type CheckinRecordsStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewCheckinRecordsStrictHandler(ssi CheckinRecordsStrictServerInterface, middlewares []CheckinRecordsStrictMiddlewareFunc) CheckinRecordsServerInterface {
	return &CheckinRecordsstrictHandler{ssi: ssi, middlewares: middlewares}
}

type CheckinRecordsstrictHandler struct {
	ssi         CheckinRecordsStrictServerInterface
	middlewares []CheckinRecordsStrictMiddlewareFunc
}

// PostCheckinTasksTaskIdCheckin 操作中间件
func (sh *CheckinRecordsstrictHandler) PostCheckinTasksTaskIdCheckin(ctx *gin.Context, taskId int) {
	var request PostCheckinTasksTaskIdCheckinRequestObject

	request.TaskId = taskId

	var body PostCheckinTasksTaskIdCheckinJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCheckinTasksTaskIdCheckin(ctx, request.(PostCheckinTasksTaskIdCheckinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCheckinTasksTaskIdCheckin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCheckinTasksTaskIdCheckinResponseObject); ok {
		if err := validResponse.VisitPostCheckinTasksTaskIdCheckinResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCheckinTasksTaskIdRecords 操作中间件
func (sh *CheckinRecordsstrictHandler) GetCheckinTasksTaskIdRecords(ctx *gin.Context, taskId int) {
	var request GetCheckinTasksTaskIdRecordsRequestObject

	request.TaskId = taskId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCheckinTasksTaskIdRecords(ctx, request.(GetCheckinTasksTaskIdRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCheckinTasksTaskIdRecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCheckinTasksTaskIdRecordsResponseObject); ok {
		if err := validResponse.VisitGetCheckinTasksTaskIdRecordsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMeCheckinRecords 操作中间件
func (sh *CheckinRecordsstrictHandler) GetUsersMeCheckinRecords(ctx *gin.Context) {
	var request GetUsersMeCheckinRecordsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMeCheckinRecords(ctx, request.(GetUsersMeCheckinRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMeCheckinRecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersMeCheckinRecordsResponseObject); ok {
		if err := validResponse.VisitGetUsersMeCheckinRecordsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
