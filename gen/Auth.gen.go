// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// AuthServerInterface 代表所有服务器处理程序。
type AuthServerInterface interface {
	// 用户登录
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context)
	// 用户注册
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
}

// AuthServerInterfaceWrapper 将上下文转换为参数。
type AuthServerInterfaceWrapper struct {
	Handler            AuthServerInterface
	HandlerMiddlewares []AuthMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type AuthMiddlewareFunc func(c *gin.Context)

// PostAuthLogin 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthRegister 操作中间件
func (siw *AuthServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// AuthGinServerOptions 提供 Gin 服务器的选项。
type AuthGinServerOptions struct {
	BaseURL      string
	Middlewares  []AuthMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterAuthHandlers 创建与 OpenAPI 规范匹配的 http.Handler 路由。
func RegisterAuthHandlers(router gin.IRouter, si AuthServerInterface) {
	RegisterAuthHandlersWithOptions(router, si, AuthGinServerOptions{})
}

// RegisterAuthHandlersWithOptions 创建带有附加选项的 http.Handler
func RegisterAuthHandlersWithOptions(router gin.IRouter, si AuthServerInterface, options AuthGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"code": "1", "message": err.Error()})
		}
	}

	wrapper := AuthServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin200JSONResponse struct {
	Code string `json:"code"`
	Data struct {
		// Token JWT 令牌
		Token string `json:"token,omitempty"`

		// UserId 用户ID
		UserId int `json:"userId,omitempty"`

		// Username 用户名
		Username string `json:"username,omitempty"`
	} `json:"data"`
}

func (response PostAuthLogin200JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin400JSONResponse BadRequest

func (response PostAuthLogin400JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin401JSONResponse Unauthorized

func (response PostAuthLogin401JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin500JSONResponse InternalServerError

func (response PostAuthLogin500JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegisterRequestObject struct {
	Body *PostAuthRegisterJSONRequestBody
}

type PostAuthRegisterResponseObject interface {
	VisitPostAuthRegisterResponse(w http.ResponseWriter) error
}

type PostAuthRegister201JSONResponse struct {
	Code string `json:"code"`
	Data User   `json:"data"`
}

func (response PostAuthRegister201JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister400JSONResponse BadRequest

func (response PostAuthRegister400JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister409JSONResponse Conflict

func (response PostAuthRegister409JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister500JSONResponse InternalServerError

func (response PostAuthRegister500JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// AuthStrictServerInterface represents all server handlers.
type AuthStrictServerInterface interface {
	// 用户登录
	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)
	// 用户注册
	// (POST /auth/register)
	PostAuthRegister(ctx context.Context, request PostAuthRegisterRequestObject) (PostAuthRegisterResponseObject, error)
}

type AuthStrictHandlerFunc = strictgin.StrictGinHandlerFunc
type AuthStrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewAuthStrictHandler(ssi AuthStrictServerInterface, middlewares []AuthStrictMiddlewareFunc) AuthServerInterface {
	return &AuthstrictHandler{ssi: ssi, middlewares: middlewares}
}

type AuthstrictHandler struct {
	ssi         AuthStrictServerInterface
	middlewares []AuthStrictMiddlewareFunc
}

// PostAuthLogin 操作中间件
func (sh *AuthstrictHandler) PostAuthLogin(ctx *gin.Context) {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx, request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthRegister 操作中间件
func (sh *AuthstrictHandler) PostAuthRegister(ctx *gin.Context) {
	var request PostAuthRegisterRequestObject

	var body PostAuthRegisterJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegister(ctx, request.(PostAuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthRegisterResponseObject); ok {
		if err := validResponse.VisitPostAuthRegisterResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
